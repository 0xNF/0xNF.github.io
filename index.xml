<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nothing in Particular</title>
    <link>https://0xnf.github.io/</link>
    <description>Recent content on Nothing in Particular</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Dec 2018 17:01:51 -0800</lastBuildDate>
    
	<atom:link href="https://0xnf.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Swipr - Server</title>
      <link>https://0xnf.github.io/posts/ml/swipr10/</link>
      <pubDate>Thu, 13 Dec 2018 17:01:51 -0800</pubDate>
      
      <guid>https://0xnf.github.io/posts/ml/swipr10/</guid>
      <description>Recall our arch diagram from the two chapters ago:
The Database Service is a collection of methods opening and closing SQLite connections and, while important, is really exceedingly boring and furthermore, unsurprising. As such, we&amp;rsquo;ll leave it out of the discussion.
We&amp;rsquo;ll also leave out building the Razor Pages and the views, dealing with identity, migrating our initial user tables with EF Core and other such minutiae of running an ASP.</description>
    </item>
    
    <item>
      <title>Swipr - Datastore</title>
      <link>https://0xnf.github.io/posts/ml/swipr09/</link>
      <pubDate>Thu, 13 Dec 2018 15:37:02 -0800</pubDate>
      
      <guid>https://0xnf.github.io/posts/ml/swipr09/</guid>
      <description>We need a datastore. Primarily so that we can stow a given user&amp;rsquo;s Tinder information &amp;ndash; Facebooked ID, Facebooked password, Facebooked access token, and Tinder access token, &amp;ndash; but also because we now have a complicated application it&amp;rsquo;s state must be preserved somehow.
We&amp;rsquo;re going to skip talking about tables relating to how ASP.NET Core projects do identity because there are a lot of tables for that. The only thing worth pointing out with respect to that is many of our tables will keep a foreign key to the autogenerated AspNetUsers.</description>
    </item>
    
    <item>
      <title>Swipr - LibSwipr</title>
      <link>https://0xnf.github.io/posts/ml/swipr08/</link>
      <pubDate>Thu, 13 Dec 2018 06:36:13 -0800</pubDate>
      
      <guid>https://0xnf.github.io/posts/ml/swipr08/</guid>
      <description>As a harness for our model, we&amp;rsquo;ll create a server that serves as a centralized access point. This server provides the necessary facilities to register an account with it, interact with Tinder, and receive responses from the model.
The general architecture for the server will go something like this:
SwiprServer is the server, in our case, an ASP.NET Core 2 project, and LibSwipr is our custom tooling around all the other interactions.</description>
    </item>
    
    <item>
      <title>Swipr - Swipr Script Service</title>
      <link>https://0xnf.github.io/posts/ml/swipr07/</link>
      <pubDate>Wed, 12 Dec 2018 12:25:48 -0800</pubDate>
      
      <guid>https://0xnf.github.io/posts/ml/swipr07/</guid>
      <description>Now that we have a trained model, we need to consider how to interact with it.
The full tech of the script can be found here on GitHub but we&amp;rsquo;ll walk through it here too.
The overview of this step is that we have a python script acting as a local server where the client side of the script receives input and returns output to to external consumers, and the server side loads the PyTorch model and runs the computation.</description>
    </item>
    
    <item>
      <title>Swipr - Fast.ai and CNNs</title>
      <link>https://0xnf.github.io/posts/ml/swipr06/</link>
      <pubDate>Tue, 11 Dec 2018 19:27:54 -0800</pubDate>
      
      <guid>https://0xnf.github.io/posts/ml/swipr06/</guid>
      <description>Finally we can consider creating the image classification model. The jupyter notebook that was used for this process can be found here on GitHub.
DataLoader The first thing the creation of a PyTorch model requires is the creation of a DataLoader, which is a neat structure for handling the data we want to go over and what their labels should be. It loads x&amp;rsquo;s (inputs) and maps them to y&amp;rsquo;s (outputs).</description>
    </item>
    
    <item>
      <title>Swipr - Data Cleaning</title>
      <link>https://0xnf.github.io/posts/ml/swipr05/</link>
      <pubDate>Tue, 11 Dec 2018 15:29:37 -0800</pubDate>
      
      <guid>https://0xnf.github.io/posts/ml/swipr05/</guid>
      <description>Back in part 3, we said:
Of course, pictures of beaches, food, and dogs are all common Instagram subjects, even on profiles of stereotypically self centered selfie-obsessed young twenties girls. We will come back to this point in detail later on, but for now, let&#39;s assume that each profile is pure and ideal for its category.  Now it is time to come back to that.
A bunch of Instagram photos, no matter from whose profile, are of course not pure and ideal for their category, and pictures of beaches, foods, and boyfriends abound.</description>
    </item>
    
    <item>
      <title>Swipr - Data Collection (Part 1 of 2)</title>
      <link>https://0xnf.github.io/posts/ml/swipr03/</link>
      <pubDate>Tue, 11 Dec 2018 12:29:43 -0800</pubDate>
      
      <guid>https://0xnf.github.io/posts/ml/swipr03/</guid>
      <description>Data Collection In previous posts we laid out what we expect our end result to look like, but underlying all of that is of course the ML model making our auto-tinder more than just a simple always-swipe-right bot.
Like all deep learning projects, before we can consider training our model or even what our model architecture will be, we need to consider the problem of data. What, exactly do we need to collect?</description>
    </item>
    
    <item>
      <title>Swipr - Scope</title>
      <link>https://0xnf.github.io/posts/ml/swipr02/</link>
      <pubDate>Tue, 11 Dec 2018 11:04:42 -0800</pubDate>
      
      <guid>https://0xnf.github.io/posts/ml/swipr02/</guid>
      <description>From the outset we wanted to have, at the most basic level, the ability to use a CPU-only machine to judge whether or not we should swipe right on a given photograph.
Additionally, it does us no good to just have a model that does this, it needs to be useful in some form beyond merely existing, meaning it has to exist as some kind of accessible application.
Finally, it would be preferable to have this system be accessible from anywhere.</description>
    </item>
    
    <item>
      <title>Swipr - Overview</title>
      <link>https://0xnf.github.io/posts/ml/swipr01/</link>
      <pubDate>Tue, 27 Nov 2018 17:41:38 -0800</pubDate>
      
      <guid>https://0xnf.github.io/posts/ml/swipr01/</guid>
      <description>The Goal Continuing the quest to learn modern Machine Learning, I thought it would be fun to create a Tinder auto-swiper that could potentially reject matches I don&amp;rsquo;t want and accept matches I do want.
One of my friends had the brilliant idea of naming this tinderbot &amp;ldquo;Swiper&amp;rdquo;, like the fox from Dora the Explorer, famous for being repelled by the intrepid protagonists with the incantation of &amp;ldquo;Swiper, no swiping!</description>
    </item>
    
    <item>
      <title>Machine Levine Mk. II</title>
      <link>https://0xnf.github.io/posts/ml/mk2/</link>
      <pubDate>Sat, 03 Nov 2018 07:22:07 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/ml/mk2/</guid>
      <description>Machine Levine Mk. II is the second of the Matt Bots, and the first of which can produce any kind of coherent output. A brief description of his capabilities are described at his homepage over at http://machinelevine.winetech.com/bots/ml2, but we&amp;rsquo;ll deal with some deeper ideas behind his creation and operation here.
Data Collection Mk. II uses the same initial corpus that Mk. I uses. For more details on data collection, refer to Mk.</description>
    </item>
    
    <item>
      <title>Machine Levine Mk. I</title>
      <link>https://0xnf.github.io/posts/ml/mk1/</link>
      <pubDate>Fri, 02 Nov 2018 20:08:56 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/ml/mk1/</guid>
      <description>This is a description of how the first of the Matt Bots came into existence. Few things in this document should be interpreted as the best or even a correct way to do anything - this bot is an academic exercise. That being said, here is how he was made.
Data Collection Like the general post describes, the data used to train the Matt model was derived from Matt Levine&amp;rsquo;s at-the-time 571-count archive of Money Stuff articles.</description>
    </item>
    
    <item>
      <title>Machine Levine</title>
      <link>https://0xnf.github.io/posts/ml/machinelevine/</link>
      <pubDate>Thu, 01 Nov 2018 19:08:56 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/ml/machinelevine/</guid>
      <description>The Goal In order to better understand machine learning, I decided to see if I could get a neural network to write articles like Matt Levine. The original goal was to sort Spotify songs by male or female vocals, but I had been learning all of this stuff by following along with the fast.ai courses, and that specific use case was a bit afield of the coursework and forum discussions happening in the MOOC.</description>
    </item>
    
    <item>
      <title>Git Change Tracking Causes VS Code Freezes</title>
      <link>https://0xnf.github.io/posts/misc/big-git-slow-vscode/</link>
      <pubDate>Fri, 19 Oct 2018 15:22:42 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/misc/big-git-slow-vscode/</guid>
      <description>Tracking lots of changes in git will freeze VS Code tl;dr: If you workspace is git tracked and you have many (1,000+) outstanding files being change-tracked, your VS Code windows may experience severe slowdowns or outright freezing.
Like the tl;dr says, if you&amp;rsquo;re tracking a ton of changes, you&amp;rsquo;ll get window freezes.
Try to keep tracked changes below 1,000, and try to not track so many different items. If it can&amp;rsquo;t be helped, then try to commit the changes often enough for it to not be a problem.</description>
    </item>
    
    <item>
      <title>A system for approaching security questions</title>
      <link>https://0xnf.github.io/posts/security/securityquestions/</link>
      <pubDate>Wed, 17 Oct 2018 11:11:18 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/security/securityquestions/</guid>
      <description>Security questions are user hostile and advantage the attacker  Why security questions suck  They&amp;rsquo;re based on publicly available information. They&amp;rsquo;re based on capricious and changing feelings They&amp;rsquo;re based on murky and easily misremembered factoids They&amp;rsquo;re based on certain assumptions of the world that are not universally true  What to do? Social Engineering  A system for security questions  System Requirements System #1 - Design Considerations  The MUST-NOT Items The MAY Items  Some Example System 1   System #2 - Design Considerations  Conclusion  Security questions are user hostile and advantage the attacker Security questions are a terrible concept and should be abolished.</description>
    </item>
    
    <item>
      <title>Long Lived SSH Keys Considered Harmful</title>
      <link>https://0xnf.github.io/posts/security/long-lived-ssh-keys-considered-harmful/</link>
      <pubDate>Mon, 03 Sep 2018 15:01:45 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/security/long-lived-ssh-keys-considered-harmful/</guid>
      <description>Disclaimer: This advice goes for any credential, including and especially passwords
tl;dr: You should, at regular intervals, change out and retire old SSH keys.
SSH keys are dangerous An SSH key should be considered a short-lived resource and as such and should be refreshed periodically. Here are a few reasons why:
 They can be compromised They are highly privileged They can be automatically generated They can easily be replaced on many services  Refreshing your SSH keys has the added benefit of following the Let&amp;rsquo;s Encrypt School of Critical Process Management:</description>
    </item>
    
    <item>
      <title>Arguments Against HTTPS</title>
      <link>https://0xnf.github.io/posts/security/arguments-against-https/</link>
      <pubDate>Mon, 03 Sep 2018 14:50:34 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/security/arguments-against-https/</guid>
      <description>Disclaimer: I think HTTPS everywhere is a generally good thing, but it isn&amp;rsquo;t unmitigated. See this earlier post about why HTTPS is good and why you should do it.
That being said, there are arguments against it that ought to be taken seriously.
Some of these arguments apply systemically, i.e., because of choices made by the browser vendors, such as the decision to mark all non-HTTPS sites as insecure by default.</description>
    </item>
    
    <item>
      <title>ESK8BST -  Electric Skateboard Buy / Sell / Trade</title>
      <link>https://0xnf.github.io/posts/esk8bst/esk8bst/</link>
      <pubDate>Mon, 03 Sep 2018 07:22:07 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/esk8bst/esk8bst/</guid>
      <description>The Finished Product Raison D&amp;rsquo;etre Structure  Front End  React  Components Pages  Services  FindThread.ts GetNewestData.ts Determining BST Status Determining Price and Currency Determining Product and Company Other Data   Backend  .NET Core  Database  ScanData Subscribers Preconfirmed   Third-Party Services  Netlify Firebase AWS Serverless / Lambda  Serverless Project Functions Logging  MailGun  Types of Email Email Deliverability Email Services Mailgun&amp;rsquo;s Services  Double Opt-In + Unsubscribe Automated Security Scan    Privacy and Security  Firebase Rules / Service Accounts Reddit triggering Tracking Protection   The Finished Product Available at https://esk8bst.</description>
    </item>
    
    <item>
      <title>What Good Are VPNs?</title>
      <link>https://0xnf.github.io/posts/security/what-good-are-vpns/</link>
      <pubDate>Tue, 24 Jul 2018 18:00:02 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/security/what-good-are-vpns/</guid>
      <description>Good at some things, bad at others. At the most basic level, a VPN is an end-to-end service that encrypts network activity on one end and decrypts it at another. Depending on what kind of platform you are on, VPNs can be installed at different and deeper layers of the network stack.
That&amp;rsquo;s all it is. Encrypted data at one end, decrypted data at the other. Anything else is fluff, extras added on top.</description>
    </item>
    
    <item>
      <title>HTTPS Is About Respecting Your Users</title>
      <link>https://0xnf.github.io/posts/security/https-is-about-respecting-your-users/</link>
      <pubDate>Tue, 24 Jul 2018 16:47:57 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/security/https-is-about-respecting-your-users/</guid>
      <description>Respect Your Users As of July 24th, 2018, Google Chrome is visibly marking all non-HTTPS sites as &amp;ldquo;not secure&amp;rdquo;. In light of this, it might be prudent to elaborate on what exactly HTTPS is meant to do.
A site without HTTPS is vulnerable to Man-In-The-Middle (MITM) attacks, which Troy Hunt shows off convincingly over at https://www.troyhunt.com/heres-why-your-static-website-needs-https/
That site is all about demonstrating through words, video, and actions, what happens when you don&amp;rsquo;t have HTTPS.</description>
    </item>
    
    <item>
      <title>UWP: Simple Events</title>
      <link>https://0xnf.github.io/posts/uwp/simple-events/</link>
      <pubDate>Thu, 19 Jul 2018 15:31:28 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/uwp/simple-events/</guid>
      <description>Notes [07/19/2018] Note: This post refers to the library Microsoft.NETCore.UniversalWindowsPlatform, version 6.2.0-Preview1-26502-02.
Events Some problems are just made so much easier in XAML based apps if you use the Event pub/sub model.
We&amp;rsquo;ll structure our events the way the excellent Template10 does:
 One event
 One EventRaised method  Untyped Events These events carry no information aside form the fact that it occurred.
In the class that the event originates from:</description>
    </item>
    
    <item>
      <title>UWP: ListView Row Height</title>
      <link>https://0xnf.github.io/posts/uwp/listview-row-height/</link>
      <pubDate>Thu, 19 Jul 2018 09:06:33 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/uwp/listview-row-height/</guid>
      <description>Notes [07/19/2018] Note: This post refers to the library Microsoft.NETCore.UniversalWindowsPlatform, version 6.2.0-Preview1-26502-02.
ListView Row Height When dealing with ListViews in UWP, sometimes more information density is desired, and the quickest way to get that density is to adjust the row height of each item in the ListView.
By default in a new ListView, information density is low and look like this:
Any control that inherits from ItemsPanel in UWP Xaml must have their row heights adjusted by overriding the style parameter in the parent object:</description>
    </item>
    
    <item>
      <title>Towards a Secure and Private Firefox Installation</title>
      <link>https://0xnf.github.io/posts/misc/firefox-user-security/</link>
      <pubDate>Thu, 05 Jul 2018 07:20:43 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/misc/firefox-user-security/</guid>
      <description>With the massive overhaul that was Firefox Quantum (FF57), it&amp;rsquo;s worth checking out how to make a modern Firefox install secure.
Much of modern Firefox&amp;rsquo;s security comes from the fact that in addition to doing extensive work on the architecture underlying the browser as a whole, they also removed the old extensions system. That has been a double-edged sword, because many beloved extensions relied on the that old architecture, but the Firefox developers have been working closely with the authors of popular extensions to add back in the necessary pieces they require.</description>
    </item>
    
    <item>
      <title>Bin and Obj Are the Devil</title>
      <link>https://0xnf.github.io/posts/uwp/bin-and-obj-are-the-devil/</link>
      <pubDate>Tue, 19 Jun 2018 09:06:33 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/uwp/bin-and-obj-are-the-devil/</guid>
      <description>the first in what is likely a series on cache invalidation being hard.
tl;dr - close Visual Studio and delete your obj/ and bin/ directories if your project isn&amp;rsquo;t building and giving cryptic errors.
Your project was working fine, but now all of a sudden it can&amp;rsquo;t find a reference whose location didn&amp;rsquo;t change. Or it won&amp;rsquo;t build because something is out of date. Or the version is incorrect.
Maybe your project is suddenly throwing errors like cannot find source file or xxx does not exist in namespace yyy.</description>
    </item>
    
    <item>
      <title>#region Is Fine</title>
      <link>https://0xnf.github.io/posts/misc/regionisfine/</link>
      <pubDate>Mon, 18 Jun 2018 19:53:31 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/misc/regionisfine/</guid>
      <description>Occasionally you&amp;rsquo;ll encounter someone whining about using C#&amp;rsquo;s #region / #endregion feature in your code.
The complaints always boil down to one thing: Overuse of regions is indicative of bad design because it promotes hiding flaws in class structure. Mostly they mean that the class is too big and should be split up.
That&amp;rsquo;s not a necessarily bad observation on its face, but it&amp;rsquo;s farcical to blame bad design on using regions.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 19)</title>
      <link>https://0xnf.github.io/posts/oauthserver/19/</link>
      <pubDate>Mon, 18 Jun 2018 18:11:56 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/19/</guid>
      <description>Welcome to the nineteenth and final part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
Pushing to Azure To finish off this project, we&amp;rsquo;ll be deploying our application to the free tier of Microsoft Azure. We&amp;rsquo;ll be taking most of our cues from Nate Barbettini&amp;rsquo;s excellent Little ASP.NET Core Book
For the purposes of this tutorial, I assume you already have a Microsoft account and are willing to use it to deploy to the cloud.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 18)</title>
      <link>https://0xnf.github.io/posts/oauthserver/18/</link>
      <pubDate>Mon, 18 Jun 2018 18:11:54 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/18/</guid>
      <description>Welcome to the eighteenth part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
Rate Limiting - Attribute Creation We left off last section with rate limits being granted to the to clients and tokens at creation time, but we don&amp;rsquo;t yet have a way to check those limits when they call our API.
To do so, we&amp;rsquo;ll be making an Attribute that we can use to decorate the controllers or methods that we want to be rate limited.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 17)</title>
      <link>https://0xnf.github.io/posts/oauthserver/17/</link>
      <pubDate>Mon, 18 Jun 2018 18:11:52 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/17/</guid>
      <description>Rate Limiting - Models and Provider Changes There are any number of different ways to implement rate limits - the approach we will follow is outlined like so:
 All endpoints under /v1/api are limited, no endpoint is free. All endpoints share a limit. Calling /me 1,999 times, then /albums once will rate limit you on the next call. (Assuming a limit of 2,000 for some timeframe.) Renewing a token counts towards the limit - after all, the token endpoint is underneath /api/v1/.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 16)</title>
      <link>https://0xnf.github.io/posts/oauthserver/16/</link>
      <pubDate>Mon, 18 Jun 2018 18:11:50 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/16/</guid>
      <description>Welcome to the sixteenth part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
Token Revocation Token revocation is the process of invalidating already issued tokens. Because tokens are serialized with server data taken at a snapshot in time, there is no way for a token to know whether it&amp;rsquo;s been invalidated, except for when it comes to its expiration date. Further, there&amp;rsquo;s no given way for the server to know a token has been revoked either - at least, not without a backing datastore.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 15)</title>
      <link>https://0xnf.github.io/posts/oauthserver/15/</link>
      <pubDate>Mon, 18 Jun 2018 18:11:49 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/15/</guid>
      <description>Welcome to the fifteenth part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
Scope Authorization with Policies, Requirements and Handlers Just adding Authorization attributes is insufficient for our purposes - our tokens have scopes associated with them, and our endpoint authorization checks should reflect that. To do so, we will use policies, which you can read about on the Microsoft Docs.
Policies are fragments you can add to an authorization attribute that confirm whether a given HttpContext meets the requirements of the attribute, beyond simply being authenticated or not.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 14)</title>
      <link>https://0xnf.github.io/posts/oauthserver/14/</link>
      <pubDate>Mon, 18 Jun 2018 18:11:47 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/14/</guid>
      <description>Welcome to the fourteenth part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
Adding OAuth Validation Our server successfully issues the three token types, but we don&amp;rsquo;t have a way to actually force a token check on our endpoints yet. One of the packages we downloaded initially was AspNet.Security.OAuth.Validation. We&amp;rsquo;re going to use that to add OAuth Validation to our server.
In Startup.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 13)</title>
      <link>https://0xnf.github.io/posts/oauthserver/13/</link>
      <pubDate>Mon, 18 Jun 2018 18:11:45 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/13/</guid>
      <description>Welcome to the thirteenth part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
Identity, Claims, and Authorization Tickets We&amp;rsquo;ve been skirting talking about claims and authentication tickets by hiding all of it behind our TicketCounter class. You can get a in-depth overview of what those are over at the Microsoft Docs.
Claims are how the ASP.NET team has approached identity and authorization details since about 2016.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 12)</title>
      <link>https://0xnf.github.io/posts/oauthserver/12/</link>
      <pubDate>Mon, 18 Jun 2018 18:11:43 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/12/</guid>
      <description>Welcome to the twelfth part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
Authorization Request Accept/Deny View Two of the the three flows we support, Implicit Grant and Authorization Code, are interactive flows - they require that the user be presented with a screen where they can accept or deny the authorization request.
As a preview, this is what our auth page will look like: Add the ViewModel Under Models/, add a new folder AuthorizeViewModels/ and add a new AuthorizeViewModel class:</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 11)</title>
      <link>https://0xnf.github.io/posts/oauthserver/11/</link>
      <pubDate>Mon, 18 Jun 2018 18:11:42 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/11/</guid>
      <description>Welcome to the eleventh part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
Services Our methods thus far have been peppered with a reference to a service named ValidationService. This lightweight class is a service that queries our database. Nothing is preventing us from doing these checks inside the OAuthProvider class itself, but the abstraction lends itself to a cleaner batch of methods.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 10)</title>
      <link>https://0xnf.github.io/posts/oauthserver/10/</link>
      <pubDate>Mon, 18 Jun 2018 18:11:40 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/10/</guid>
      <description>Welcome to the tenth part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
Authorization Provider - Token Methods We&amp;rsquo;re still implementing the Providers/OAuthProvider.cs class we made in the previous section. Here we&amp;rsquo;re going to deal with the three Token methods we left un-overridden from last time: ValidateTokenRequest, HandleTokenRequest, ApplyTokenResponse.
Validate Token Request As a small warning, the validate token request endpoint is one of the longest methods we&amp;rsquo;ll be implementing.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 09)</title>
      <link>https://0xnf.github.io/posts/oauthserver/09/</link>
      <pubDate>Mon, 18 Jun 2018 18:11:28 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/09/</guid>
      <description>Welcome to the ninth part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
Authorization Provider - Authorize Methods It&amp;rsquo;s worth taking a moment to have an overview of how the OpenIdConnectServer library actually works. You are encouraged to read Kevin Chalet&amp;rsquo;s post here.
An authorization provider is an implementation of the OpenIdConnectServerProvider type which overrides the virtual methods we want to implement. We&amp;rsquo;re going to leave most of these un-overridden, but if you ever need additional functionality, you can always override it and inspect/implement that stage of the pipeline.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 08)</title>
      <link>https://0xnf.github.io/posts/oauthserver/08/</link>
      <pubDate>Mon, 18 Jun 2018 18:11:26 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/08/</guid>
      <description>Welcome to the eighth part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
Adding Client Scopes Scopes are ways to limit a client&amp;rsquo;s ability to act on behalf of the user. The scopes are defined by the Resource Server, like Spotify or Google. The client requests the scopes they want to work with, and those scopes are presented to the Resource Owner for authorization - they can then choose to accept or reject the authorization request, meaning that just because an application requests certain, potentially high-value access, doesn&amp;rsquo;t mean it automatically gets it.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 07)</title>
      <link>https://0xnf.github.io/posts/oauthserver/07/</link>
      <pubDate>Thu, 07 Jun 2018 19:12:13 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/07/</guid>
      <description>Welcome to the seventh part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
OAuth Client CRUD - Views This is the second part of adding our OAuth Client management pages. In the previous section we generated a controller, which automatically generated some views for us. In this section, we&amp;rsquo;ll make those views do what we need them to do.
Details and Delete Views Delete the following two cshtml files - we don&amp;rsquo;t need them, because we&amp;rsquo;ll be rolling their functions into the Edit view.</description>
    </item>
    
    <item>
      <title>Why aren&#39;t you using WSL</title>
      <link>https://0xnf.github.io/posts/misc/wsl/</link>
      <pubDate>Wed, 06 Jun 2018 21:38:01 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/misc/wsl/</guid>
      <description>A few years ago Microsoft shipped an experimental feature in their insider builds called the Windows Subsystem for Linux, which is a bizarrely named thing that runs Linux natively from within Windows.
To nitpick a bit, it doesn&amp;rsquo;t strictly run Linux as in the kernel, but it does run the userspace applications. And it&amp;rsquo;s not really a Windows-like subsystem for Linux, it&amp;rsquo;s more of a Linux subsystem for Windows, but it&amp;rsquo;s difficult to pronounce &amp;ldquo;LSW&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 06)</title>
      <link>https://0xnf.github.io/posts/oauthserver/06/</link>
      <pubDate>Wed, 06 Jun 2018 16:16:01 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/06/</guid>
      <description>Welcome to the sixth part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
OAuth Client CRUD - Controller and ViewModels This is the first part of adding our OAuth Client management pages. We&amp;rsquo;ll set up the controller and the viewmodel here. In next part, we&amp;rsquo;ll add the html views.
View Models ViewModels are, at least in the context of ASP.NET (as opposed to UWP where the MVVM pattern changes what it means slightly), is a way of firewalling our models from our views.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 05)</title>
      <link>https://0xnf.github.io/posts/oauthserver/05/</link>
      <pubDate>Wed, 06 Jun 2018 16:15:59 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/05/</guid>
      <description>Welcome to the fifth part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
Adding Models We can&amp;rsquo;t do very much without creating some models of our domain objects, both in memory and in the database.
At this point in time we only have two main things to worry about, and that&amp;rsquo;s what our OAuth Client Application looks like, and how are they owned by Users?</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 04)</title>
      <link>https://0xnf.github.io/posts/oauthserver/04/</link>
      <pubDate>Wed, 06 Jun 2018 16:15:58 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/04/</guid>
      <description>Welcome to the fourth part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
Public API Barebones Setup We&amp;rsquo;re going to have a very small public API that will entertain a few GET and PUT methods. At first, these methods will be entirely unauthenticated, but as time goes on we&amp;rsquo;ll eventually put some of them behind OAuth authentication, then add Scope checks, and finally Rate Limiting.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 03)</title>
      <link>https://0xnf.github.io/posts/oauthserver/03/</link>
      <pubDate>Wed, 06 Jun 2018 16:15:56 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/03/</guid>
      <description>Welcome to the third part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
SQLite and Initial Migration If you tried to start the website we just initialized, you&amp;rsquo;d find that you won&amp;rsquo;t be able to login or register, receiving error messages instead of a welcome screen.
Although an initial migration has been provided for us, it hasn&amp;rsquo;t been applied, and no database exists yet.</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 02)</title>
      <link>https://0xnf.github.io/posts/oauthserver/02/</link>
      <pubDate>Wed, 06 Jun 2018 16:15:55 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/02/</guid>
      <description>Welcome to the second part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
Project Setup and Dependency Downloads Create a new ASP.NET Core Web Application named OAuthTutorial. You can use your own name, but make sure to get your namespaces correct if you do.
It&amp;rsquo;s helpful if you have Create directory for solution and Create new Git repository checked.
Select Web Application (Model-View-Controller)</description>
    </item>
    
    <item>
      <title>Implement an OAuth 2.0 Server (Part 01)</title>
      <link>https://0xnf.github.io/posts/oauthserver/01/</link>
      <pubDate>Wed, 06 Jun 2018 16:15:39 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/oauthserver/01/</guid>
      <description>Welcome to the first part of a series of posts where we will implement an OAuth 2 Server using AspNet.Security.OpenIdConnectServer.
The creator of the library, Kevin Chalet, has an excellent series of blog posts, that you are encouraged to read for more information, with less of a hands-on approach.
The final product is available here on GitHub, and at the end of each step the project as completed up to that point will be available on its respective branch.</description>
    </item>
    
    <item>
      <title>Lyricall Security</title>
      <link>https://0xnf.github.io/posts/lyricall/security/</link>
      <pubDate>Tue, 22 May 2018 17:02:40 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/lyricall/security/</guid>
      <description>This is the Security Model for lyricall.net as of May 22nd, 2018.
Security Model tl;dr:
 The servers are secure
 The services are secure
 Connections are secure
 Data is validated
 Ownership is checked
  todo:
 Encrypt db at Rest
 Automatically rotate dbhost/dbname/dbuer/dbpassword values Spin out authentication server from api server
 Spin out client server from api server  Server Provisioning All machines are provisioned in the standard manner:</description>
    </item>
    
    <item>
      <title>Lyricall Architecture</title>
      <link>https://0xnf.github.io/posts/lyricall/architecture/</link>
      <pubDate>Tue, 22 May 2018 15:35:08 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/lyricall/architecture/</guid>
      <description>This summary of the architecture was correct upon its initial posting (November 2017). Changes have since been made. There is no guarantee that this post remains accurate into the future.
Table of Contents  Architecture of lyricall.net  Technology tl;dr: App Overview Front End  TypeScript Why TypeScript Redux React Why React  Back End Database - PostgreSQL  Why Postgres Database Schema Lyricall Tables Straggler Tables ASP.NET / Entity Framework Tables  Server - .</description>
    </item>
    
    <item>
      <title>The NEU Report - Survey of MOOC Platforms</title>
      <link>https://0xnf.github.io/posts/neu/04/</link>
      <pubDate>Tue, 22 May 2018 15:34:47 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/neu/04/</guid>
      <description>This is the third and final document in a multiple part document originally written in 2015. The first post can be found here, and the previous post can be found here. This report has been adapted from a word document.
MOOC Platforms Shim Vijay and Evin Yesudas
Table of Contents  MOOC Platforms: Analysis Report  Preface Introduction Objective of this Study  Overview  EdX Coursera Udacity NovoEd  Methodology MOOC Platform Comparison Chart Key Findings  How Are Qualitative Courses Managed Types of Certificates &amp;amp; Their Importance Free Certificate Verified Certificate Helping The Participants To Complete   MOOC Platforms: Analysis Report Preface This study focuses on the review of four leading MOOC platforms namely Coursera, EdX, NovoEd and Udacity.</description>
    </item>
    
    <item>
      <title>The NEU Report - Bringing CCIS To The Top</title>
      <link>https://0xnf.github.io/posts/neu/03/</link>
      <pubDate>Tue, 22 May 2018 15:34:44 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/neu/03/</guid>
      <description>This is the third in a multiple part document originally written in 2015. The first post can be found here, the previous post can be found here, and the next post can be found here. This report has been adapted from a word document.
Bringing CCIS to the Top Table of Contents  Executive Summary The Introductory Course The Over Focus on Mathematics Math Overview and Applications Course Outline  Concepts, Identification, and Applications of Mathematics  The Bad Courses  Theory of Computation Programming Languages  The Hunt for Great Professors  The Qualities of a Good Professor Qualitizer Results The Hunt Continues People in Specific   Executive Summary The computer science school is facing a huge amount of competition from online courses, self-taught people, and coding bootcamps.</description>
    </item>
    
    <item>
      <title>The NEU Report - The State of Northeastern University</title>
      <link>https://0xnf.github.io/posts/neu/02/</link>
      <pubDate>Tue, 22 May 2018 15:34:43 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/neu/02/</guid>
      <description>This is the second in a multiple part document originally written in 2015. The first post can be found here and the next post can be found here. This report has been adapted from a word document.
The State of Northeastern University Table of Contents  Executive Summary In Detail  Northeastern’s Desire to Compete Outside It’s Expertise MIT Building 20 Like Activist Investors, Except for University Northeastern’s Neglect of Trends in Technology and Education Imagining What Could Be What MOOCs Are Doing Right What MOOCs Are Doing Wrong The Innovators A Few Radical Ideas Post Graduate Services Joint Professorship and Co-Op Appointments at the ISEB Alternative Curriculum  The Co-Op Curriculum The Project Research Curriculum  Closing Thoughts   Executive Summary Northeastern is making an admirable expansion into research, but in doing so, it is neglecting its history as a trade school.</description>
    </item>
    
    <item>
      <title>The NEU Report - Executive Summary</title>
      <link>https://0xnf.github.io/posts/neu/01/</link>
      <pubDate>Tue, 22 May 2018 15:34:41 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/neu/01/</guid>
      <description>This is the first in a multiple part document originally written in 2015. The next post can be found here. This report has been adapted from a word document.
The NEU Report Executive Summary Nick Flower | Articulate Insights | articulateinsights.com Northeastern University, an institution that has separated itself from the pack and made its reputation by distilling trade knowledge and giving its students a leg up in industry has recently seen its focus shift to becoming more like the mainstream colleges it sought to differentiate itself from.</description>
    </item>
    
    <item>
      <title>Swipr - Data Collection (Part 2 of 2)</title>
      <link>https://0xnf.github.io/posts/ml/swipr04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://0xnf.github.io/posts/ml/swipr04/</guid>
      <description>Downloading from Instagram There are a number of solutions for scraping Instagram, and it&amp;rsquo;s mostly a pick-your-poison kind of affair. we picked the first well-supported google result for &amp;ldquo;Instagram scaper&amp;rdquo; and came up with Instalooter. It seemed to come with good documentation and sufficient automation facilities.
Rate Limits We are told that prior to April 2018, downloading from Instagram was a much more lackadaisical affair. There was allegedly a generous rate limit for a given Instagram login token, upwards of 5,000 page requests per hour.</description>
    </item>
    
  </channel>
</rss>