<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>database design on Nothing in Particular</title>
    <link>https://0xnf.github.io/categories/database-design/</link>
    <description>Recent content in database design on Nothing in Particular</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 May 2018 17:02:40 -0700</lastBuildDate><atom:link href="https://0xnf.github.io/categories/database-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lyricall Security</title>
      <link>https://0xnf.github.io/posts/lyricall/security/</link>
      <pubDate>Tue, 22 May 2018 17:02:40 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/lyricall/security/</guid>
      <description>This is the Security Model for lyricall.net as of May 22nd, 2018.
Security Model tl;dr:
 The servers are secure The services are secure Connections are secure Data is validated Ownership is checked  todo:
 Encrypt db at Rest Automatically rotate dbhost/dbname/dbuer/dbpassword values Spin out authentication server from api server Spin out client server from api server  Server Provisioning All machines are provisioned in the standard manner:
 SSH key only access, no password authentication allowed Standard SSH port is changed to be non-standard below 1024 to stop automated attacks on port 22  Ports below 1024 are privileged and can&amp;rsquo;t be re-bound by another service.</description>
    </item>
    
    <item>
      <title>Lyricall Architecture</title>
      <link>https://0xnf.github.io/posts/lyricall/architecture/</link>
      <pubDate>Tue, 22 May 2018 15:35:08 -0700</pubDate>
      
      <guid>https://0xnf.github.io/posts/lyricall/architecture/</guid>
      <description>This summary of the architecture was correct upon its initial posting (November 2017). Changes have since been made. There is no guarantee that this post remains accurate into the future.
Table of Contents  Architecture of lyricall.net  Technology tl;dr: App Overview Front End  TypeScript Why TypeScript Redux React Why React   Back End Database - PostgreSQL  Why Postgres Database Schema Lyricall Tables Straggler Tables ASP.NET / Entity Framework Tables   Server - .</description>
    </item>
    
  </channel>
</rss>
